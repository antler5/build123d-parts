# -*- mode: org -*-
# SPDX-FileCopyrightText: 2024 antlers <antlers@illucid.net>
# SPDX-License-Identifier: CC-BY-SA-4.0

@@html:<h1>antler5' build123d parts</h1>@@

* Org-mode Variables                                               :noexport:

#+BEGIN_SRC elisp :session :results none :exports none
(setq org-pandoc-options '((shift-heading-level-by . 1)))
#+END_SRC

#+BEGIN_SRC sh :session shared :results none :exports none
package="build123d-parts"
channel_url="https://github.com/antler5/$package"
keyring_url="https://github.com/antler5/$package"
commit="dc26658e5d1f248b3f3e56d48456adb6d7e40b20"
fingerprint="DACB 035F B9B0 EE9C 7E13  1AAA C310 15D9 6620 A955"
format() { printf '#+BEGIN_SRC %s\n%s\n#+END_SRC\n' "$1" "$2"; }
#+END_SRC

* Cloning and Authenticating

#+BEGIN_SRC sh :session shared :results output raw :exports results
format sh "git clone '$channel_url' && cd $package"
#+END_SRC

You may verify that each commit in this branch has been signed by an
authorized contributer via GNU Guix's [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-git-authenticate.html][authentication]] mechanism.

#+BEGIN_SRC sh :session shared :results output raw :exports results
format sh "\
git fetch origin keyring:keyring
guix git authenticate \\
  '$commit' \\
  '$fingerprint'"
#+END_SRC

* Included parts

#+BEGIN_SRC elisp :exports results :results table :colnames '("File-name" "Description" "License")
(cl-flet ((grep-file (cmd f)
            (string-trim-right
              (shell-command-to-string
                (concat (concat "grep -Po '" cmd "")
                        (shell-quote-argument f))))))
  (let ((prefix (concat (expand-file-name ".") "/")))
    (-map (lambda (f)
            (let ((f (string-remove-prefix prefix f)))
              `(,f
                ,(string-replace "\n" " "
                   (grep-file "#\\\\ \\K.*(?=$)' " f))
                ;; REUSE-IgnoreStart
                ,(grep-file "# SPDX-License-Identifier: \\K.*(?=$)' " f)
                ;; REUSE-IgnoreEnd
                )))
          (directory-files "src" "." "\\.py$"))))
#+END_SRC

* License

Unless otherwise specified:
- Code sources and snippets are [[https://www.gnu.org/licenses/gpl-3.0.html][GPL-3.0-or-later]].\\
- The documentation and other texts are [[https://creativecommons.org/licenses/by-sa/4.0/][CC-BY-SA-4.0]].\\
- Trivial files may be explicitly released as [[https://creativecommons.org/publicdomain/zero/1.0/legalcode][CC0-1.0]].

* Export                                                           :noexport:

#+begin_src emacs-lisp :results none :exports none
(progn
  (require 'ox-pandoc)
  (org-pandoc-export-to-commonmark)
  (while (seq-filter (lambda (p) (equal (process-name p) "pandoc"))
                     (process-list))
    (sleep-for 0 15))
  (when (file-exists-p "README.md")
    (delete-file "README.md"))
  (with-temp-buffer
    ;; REUSE-IgnoreStart
    (insert
      (string-join
        '("<!-- SPDX-FileCopyrightText: 2024 antlers <antlers@illucid.net> -->"
          "<!-- SPDX-License-Identifier: CC-BY-SA-4.0 -->"
          "<!-- This file is generated from $< -->"
          "<!-- Do not edit it directly -->"
          "")
        "\n"))
    ;; REUSE-IgnoreEnd
    (insert-file "README.md.md")
    (write-region (point-min) (point-max)
      "README.md" nil 'quietly))
  (delete-file "README.md.md"))
#+end_src

* Local Variables                                                  :noexport:

# Local Variables:
# truncate-lines: t
# End:
